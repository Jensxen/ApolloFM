@page "/api-test"
@page "/api-test/{code}"
@implements IDisposable
@inject IHttpClientFactory HttpClientFactory
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager

<h3>API Connection Test</h3>

<div class="mb-3">
	<label for="codeInput" class="form-label">Authorization Code</label>
	<input type="text" class="form-control" id="codeInput" @bind="authCode" />
</div>

<div class="mb-3">
	<label for="stateInput" class="form-label">State</label>
	<input type="text" class="form-control" id="stateInput" @bind="stateValue" />
	<button class="btn btn-sm btn-secondary mt-1" @onclick="GenerateRandomState">Generate Random State</button>
</div>

<div class="mb-3">
	<div class="mb-3">
		<button class="btn btn-primary" @onclick="TestHandleStateError">Test handle-state-error</button>
		<button class="btn btn-info ms-2" @onclick="TestCheckTokens">Test check-tokens</button>
		<button class="btn btn-warning ms-2" @onclick="TestDirectLogin">Test Direct Login</button>
		<button class="btn btn-secondary ms-2" @onclick="ExtractCodeFromUrl">Extract Code from URL</button>
	</div>
</div>

<div class="mt-4">
	<h4>Response:</h4>
	<pre class="border p-3 bg-light">@responseText</pre>
</div>

@code {
	[Parameter]
	public string Code { get; set; }

	private string authCode = "";
	private string stateValue = "";
	private string responseText = "No response yet";
	private EventCallback<Microsoft.AspNetCore.Components.Routing.LocationChangedEventArgs> _locationChangedCallback;

	protected override void OnInitialized()
	{
		_locationChangedCallback = EventCallback.Factory.Create<Microsoft.AspNetCore.Components.Routing.LocationChangedEventArgs>(
			this,
			(e) => ProcessUrlParameters()
		);

		NavigationManager.LocationChanged += OnLocationChanged;
		ProcessUrlParameters();
	}

	private void OnLocationChanged(object sender, Microsoft.AspNetCore.Components.Routing.LocationChangedEventArgs e)
	{
		ProcessUrlParameters();
	}

	private void ProcessUrlParameters()
	{
		try
		{
			var uri = new Uri(NavigationManager.Uri);

			// Check for code parameter in the URL
			if (!string.IsNullOrEmpty(Code))
			{
				authCode = Code;
				responseText = $"Code parameter found in route: {authCode.Substring(0, Math.Min(10, authCode.Length))}...";
			}

			// Also check for query parameters
			var query = System.Web.HttpUtility.ParseQueryString(uri.Query);
			var queryCode = query["code"];
			if (!string.IsNullOrEmpty(queryCode))
			{
				authCode = queryCode;
				responseText = $"Code parameter found in query: {authCode.Substring(0, Math.Min(10, authCode.Length))}...";
			}

			var queryState = query["state"];
			if (!string.IsNullOrEmpty(queryState))
			{
				stateValue = queryState;
				responseText += $"\nState parameter found: {stateValue}";
			}

			StateHasChanged();
		}
		catch (Exception ex)
		{
			responseText = $"Error processing URL: {ex.Message}";
		}
	}

	public void Dispose()
	{
		NavigationManager.LocationChanged -= OnLocationChanged;
	}

	private void GenerateRandomState()
	{
		stateValue = Guid.NewGuid().ToString();
	}

	private async Task TestHandleStateError()
	{
		try
		{
			if (string.IsNullOrEmpty(authCode))
			{
				responseText = "Please enter an authorization code";
				return;
			}

			await JSRuntime.InvokeVoidAsync("console.log", $"Testing handle-state-error with code: {authCode}");

			var client = HttpClientFactory.CreateClient("ApolloAPI");
			var url = $"api/auth/handle-state-error?code={Uri.EscapeDataString(authCode)}";

			// Add state if provided
			if (!string.IsNullOrEmpty(stateValue))
			{
				url += $"&state={Uri.EscapeDataString(stateValue)}";
			}

			await JSRuntime.InvokeVoidAsync("console.log", $"Making request to: {url}");
			responseText = $"Making request to: {url}";

			var response = await client.GetAsync(url);

			responseText = $"Response status: {(int)response.StatusCode} {response.StatusCode}\n";

			if (response.IsSuccessStatusCode)
			{
				var content = await response.Content.ReadAsStringAsync();
				responseText += $"Content: {content}";
			}
			else
			{
				var error = await response.Content.ReadAsStringAsync();
				responseText += $"Error: {error}";
			}
		}
		catch (Exception ex)
		{
			responseText = $"Error: {ex.Message}";
			await JSRuntime.InvokeVoidAsync("console.error", ex.Message);
		}
	}

	private async Task TestCheckTokens()
	{
		try
		{
			var client = HttpClientFactory.CreateClient("ApolloAPI");
			var url = "api/auth/check-tokens";

			responseText = $"Checking tokens...";
			var response = await client.GetAsync(url);

			if (response.IsSuccessStatusCode)
			{
				var content = await response.Content.ReadAsStringAsync();
				responseText = $"Token check result:\n{content}";
			}
			else
			{
				responseText = $"Error checking tokens: {(int)response.StatusCode} {response.StatusCode}";
			}
		}
		catch (Exception ex)
		{
			responseText = $"Error: {ex.Message}";
		}
	}

	private async Task TestDirectLogin()
	{
		try
		{
			// Store state in localStorage first
			if (string.IsNullOrEmpty(stateValue))
			{
				GenerateRandomState();
			}
			await JSRuntime.InvokeVoidAsync("localStorage.setItem", "spotify_auth_state", stateValue);

			// Use the /api-test as the callback URL so the code comes back to this page
			var returnUrl = $"{new Uri(NavigationManager.BaseUri).ToString()}api-test";
			var loginUrl = $"https://localhost:7043/api/auth/login?returnUrl={Uri.EscapeDataString(returnUrl)}&state={Uri.EscapeDataString(stateValue)}";

			responseText = $"Redirecting to: {loginUrl}";
			NavigationManager.NavigateTo(loginUrl, forceLoad: true);
		}
		catch (Exception ex)
		{
			responseText = $"Error: {ex.Message}";
		}
	}

	private void ExtractCodeFromUrl()
	{
		try
		{
			var uri = new Uri(NavigationManager.Uri);
			var queryParams = System.Web.HttpUtility.ParseQueryString(uri.Query);

			var code = queryParams["code"];
			if (!string.IsNullOrEmpty(code))
			{
				authCode = code;
				responseText = $"Extracted code from URL: {code.Substring(0, Math.Min(10, code.Length))}...";
			}
			else
			{
				responseText = "No code parameter found in current URL";
			}
		}
		catch (Exception ex)
		{
			responseText = $"Error extracting code: {ex.Message}";
		}
	}


}
