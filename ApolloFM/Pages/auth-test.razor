@page "/auth-test"
@using Blazored.LocalStorage
@using System.Text.Json
@using Microsoft.AspNetCore.Components.Authorization
@inject ILocalStorageService LocalStorage
@inject AuthenticationStateProvider AuthStateProvider
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation

<h3>Authentication Test</h3>

<div class="card">
    <div class="card-header">
        LocalStorage Status
    </div>
    <div class="card-body">
        <p><strong>Has access_token in localStorage:</strong> @hasToken</p>
        @if (hasToken)
        {
            <p><strong>Token preview:</strong> @tokenPreview...</p>
            <p><strong>Token length:</strong> @tokenLength characters</p>
            <button class="btn btn-danger" @onclick="ClearToken">Clear Token</button>
        }
        else
        {
            <button class="btn btn-primary" @onclick="SetTestToken">Set Test Token</button>
        }
    </div>
</div>

<div class="card mt-3">
    <div class="card-header">
        Authentication State
    </div>
    <div class="card-body">
        <p><strong>Is Authenticated:</strong> @isAuthenticated</p>
        <button class="btn btn-primary" @onclick="RefreshAuthState">Refresh State</button>
    </div>
</div>

<div class="card mt-3">
    <div class="card-header">
        Direct Test Actions
    </div>
    <div class="card-body">
        <button class="btn btn-primary" @onclick="TestLocalStorageDirectly">Test LocalStorage</button>
        <button class="btn btn-info" @onclick="TestAuthProvider">Test Auth Provider</button>
        <button class="btn btn-success" @onclick="AttemptLogin">Login</button>
        <button class="btn btn-warning" @onclick="SimulateCallbackUrl">Simulate Callback</button>
    </div>
</div>

<div class="card mt-3">
    <div class="card-header">
        Debug Info
    </div>
    <div class="card-body">
        <pre>@debugInfo</pre>
    </div>
</div>

@code {
    private bool hasToken;
    private string tokenPreview = "";
    private int tokenLength;
    private bool isAuthenticated;
    private string debugInfo = "";

    protected override async Task OnInitializedAsync()
    {
        await RefreshStatus();
    }

    private async Task RefreshStatus()
    {
        try
        {
            // Test localStorage
            var token = await LocalStorage.GetItemAsync<string>("spotify_access_token");
            hasToken = !string.IsNullOrEmpty(token);
            tokenPreview = hasToken ? token.Substring(0, Math.Min(10, token.Length)) : "";
            tokenLength = token?.Length ?? 0;

            // Test authentication state
            var authState = await AuthStateProvider.GetAuthenticationStateAsync();
            isAuthenticated = authState.User.Identity?.IsAuthenticated ?? false;

            AddDebugInfo($"Refreshed status - hasToken: {hasToken}, isAuthenticated: {isAuthenticated}");
        }
        catch (Exception ex)
        {
            AddDebugInfo($"Error in RefreshStatus: {ex.Message}");
        }
    }

    private async Task ClearToken()
    {
        try
        {
            await LocalStorage.RemoveItemAsync("spotify_access_token");
            AddDebugInfo("Token removed from localStorage");
            await RefreshStatus();
        }
        catch (Exception ex)
        {
            AddDebugInfo($"Error clearing token: {ex.Message}");
        }
    }

    private async Task SetTestToken()
    {
        try
        {
            var testToken = "test_token_" + Guid.NewGuid().ToString();
            await LocalStorage.SetItemAsync("spotify_access_token", testToken);
            AddDebugInfo($"Test token set: {testToken.Substring(0, 10)}...");
            await RefreshStatus();
        }
        catch (Exception ex)
        {
            AddDebugInfo($"Error setting test token: {ex.Message}");
        }
    }

    private async Task RefreshAuthState()
    {
        try
        {
            var authState = await AuthStateProvider.GetAuthenticationStateAsync();
            isAuthenticated = authState.User.Identity?.IsAuthenticated ?? false;
            AddDebugInfo($"Auth state refreshed: isAuthenticated={isAuthenticated}");

            if (AuthStateProvider is FM.Application.Services.SpotifyAuthenticationStateProvider spotifyAuth)
            {
                AddDebugInfo("Using SpotifyAuthenticationStateProvider");

                // Get token from localStorage
                var token = await LocalStorage.GetItemAsync<string>("spotify_access_token");
                if (!string.IsNullOrEmpty(token))
                {
                    await spotifyAuth.MarkUserAsAuthenticated(token);
                    AddDebugInfo("Manually marked user as authenticated");

                    // Refresh auth state again
                    authState = await AuthStateProvider.GetAuthenticationStateAsync();
                    isAuthenticated = authState.User.Identity?.IsAuthenticated ?? false;
                    AddDebugInfo($"Auth state after manual auth: isAuthenticated={isAuthenticated}");
                }
            }
            else
            {
                AddDebugInfo($"Auth provider type: {AuthStateProvider.GetType().FullName}");
            }
        }
        catch (Exception ex)
        {
            AddDebugInfo($"Error refreshing auth state: {ex.Message}");
        }
    }

    private async Task TestLocalStorageDirectly()
    {
        try
        {
            // Test with both Blazored.LocalStorage and direct JS
            AddDebugInfo("Testing localStorage...");

            // Blazored.LocalStorage
            await LocalStorage.SetItemAsync("test_key", "test_value");
            var readValue = await LocalStorage.GetItemAsync<string>("test_key");
            AddDebugInfo($"Blazored.LocalStorage test: {readValue == "test_value"}");

            // Direct JS
            await JSRuntime.InvokeVoidAsync("localStorage.setItem", "js_test_key", "js_test_value");
            var jsReadValue = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "js_test_key");
            AddDebugInfo($"Direct JS localStorage test: {jsReadValue == "js_test_value"}");

            // Try setting spotify_access_token directly with JS
            var testToken = "js_token_" + Guid.NewGuid().ToString();
            await JSRuntime.InvokeVoidAsync("localStorage.setItem", "spotify_access_token", testToken);
            var jsSpotifyToken = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "spotify_access_token");
            AddDebugInfo($"Direct JS spotify_access_token set: {jsSpotifyToken.Substring(0, 10)}...");

            await RefreshStatus();
        }
        catch (Exception ex)
        {
            AddDebugInfo($"Error testing localStorage: {ex.Message}");
        }
    }

    private async Task TestAuthProvider()
    {
        try
        {
            AddDebugInfo("Testing AuthProvider...");

            if (AuthStateProvider is FM.Application.Services.SpotifyAuthenticationStateProvider spotifyAuth)
            {
                var testToken = "auth_test_token_" + Guid.NewGuid().ToString();

                // Set token in localStorage first
                await LocalStorage.SetItemAsync("spotify_access_token", testToken);
                AddDebugInfo($"Test token set in localStorage");

                // Mark user as authenticated
                await spotifyAuth.MarkUserAsAuthenticated(testToken);
                AddDebugInfo("User marked as authenticated");

                // Verify auth state
                var authState = await AuthStateProvider.GetAuthenticationStateAsync();
                isAuthenticated = authState.User.Identity?.IsAuthenticated ?? false;
                AddDebugInfo($"Auth state after marking authenticated: {isAuthenticated}");

                await RefreshStatus();
            }
            else
            {
                AddDebugInfo($"AuthProvider is not SpotifyAuthenticationStateProvider, it's: {AuthStateProvider.GetType().FullName}");
            }
        }
        catch (Exception ex)
        {
            AddDebugInfo($"Error testing AuthProvider: {ex.Message}");
        }
    }

    private void AttemptLogin()
    {
        try
        {
            var apiUrl = "https://localhost:7043"; // Make sure this matches your API URL
            AddDebugInfo($"Navigating to login URL: {apiUrl}/api/auth/login");
            Navigation.NavigateTo($"{apiUrl}/api/auth/login?returnUrl={Uri.EscapeDataString($"{Navigation.BaseUri}auth-test")}", forceLoad: true);
        }
        catch (Exception ex)
        {
            AddDebugInfo($"Error attempting login: {ex.Message}");
        }
    }

    private void SimulateCallbackUrl()
    {
        try
        {
            var testToken = "simulated_token_" + Guid.NewGuid().ToString();
            var callbackUrl = $"{Navigation.BaseUri}authentication/login-callback?access_token={Uri.EscapeDataString(testToken)}&returnUrl=auth-test";

            AddDebugInfo($"Navigating to simulated callback URL: {callbackUrl}");
            Navigation.NavigateTo(callbackUrl, forceLoad: true);
        }
        catch (Exception ex)
        {
            AddDebugInfo($"Error simulating callback: {ex.Message}");
        }
    }

    private void AddDebugInfo(string info)
    {
        debugInfo = $"[{DateTime.Now:HH:mm:ss.fff}] {info}\n" + debugInfo;
        if (debugInfo.Length > 5000) debugInfo = debugInfo.Substring(0, 5000);
        StateHasChanged();
    }
}

