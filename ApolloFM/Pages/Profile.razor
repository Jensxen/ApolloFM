@page "/profile"
@using FM.Application.Services
@using FM.Application.Services.ServiceDTO
@inject AuthService AuthService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<!-- Sidebar -->
<div class="sidebar">
	<div class="sidebar-logo">
		<img src="images/ApolloFM.png" alt="ApolloFM Logo" />
	</div>

	<div class="sidebar-menu">
		<NavLink class="sidebar-item" href="dashboard">
			<i class="fas fa-home"></i>
			<span>Dashboard</span>
		</NavLink>

		<NavLink class="sidebar-item" href="forum">
			<i class="fas fa-comments"></i>
			<span>Forum</span>
		</NavLink>

		<NavLink class="sidebar-item" href="discover">
			<i class="fas fa-compass"></i>
			<span>Discover</span>
		</NavLink>

		<NavLink class="sidebar-item" href="playlists">
			<i class="fas fa-list"></i>
			<span>Playlists</span>
		</NavLink>

		<NavLink class="sidebar-item" href="profile" Match="NavLinkMatch.All">
			<i class="fas fa-user"></i>
			<span>Profile</span>
		</NavLink>
	</div>

	<div class="sidebar-footer">
		<div class="user-profile">
			<img src="@profileImageUrl" alt="User Profile" />
			<span>@userDisplayName</span>
		</div>
		<button class="logout-btn" @onclick="Logout">
			<i class="fas fa-sign-out-alt"></i>
		</button>
	</div>
</div>

<!-- Main Content -->
<div class="main-content">
	<div class="top-bar">
		<h1>Your Profile</h1>
	</div>

	<div class="content-area">
		@if (isLoading)
		{
			<div class="loading-spinner">
				<div class="spinner-border text-primary" role="status">
					<span class="visually-hidden">Loading...</span>
				</div>
			</div>
		}
		else if (hasError)
		{
			<div class="alert alert-danger">
				<p>@errorMessage</p>
				<div class="mt-3">
					<button class="btn btn-primary me-2" @onclick="RetryLoading">Retry</button>
					<button class="btn btn-success" @onclick="Login">Login to Spotify</button>
				</div>
			</div>
		}
		else
		{
			<!-- Profile Header -->
			<div class="profile-header">
				<div class="profile-image-container">
					<img src="@profileImageUrl" alt="Profile Picture" class="profile-image" />
				</div>
				<div class="profile-info">
					<h2>@userDisplayName</h2>
					<p class="profile-email">@userEmail</p>
					<div class="profile-stats">
						<div class="stat-item">
							<div class="stat-number">@topTracks?.Count</div>
							<div class="stat-label">Top Tracks</div>
						</div>
						<div class="stat-item">
							<div class="stat-number">@topArtists?.Count</div>
							<div class="stat-label">Top Artists</div>
						</div>
						<div class="stat-item">
							<div class="stat-number">@(userProfile?.Id != null ? "Premium" : "Free")</div>
							<div class="stat-label">Account</div>
						</div>
					</div>
				</div>
			</div>

			<!-- Your Top Artists -->
			<div class="content-card">
				<div class="card-header">
					<div class="d-flex justify-content-between align-items-center">
						<h3>Your Top Artists</h3>
						<div class="btn-group">
							<button class="btn @(selectedArtistTimeRange == "short_term" ? "btn-primary" : "btn-outline-primary")"
									@onclick="@(() => ChangeArtistTimeRange("short_term"))">
								Last 4 Weeks
							</button>
							<button class="btn @(selectedArtistTimeRange == "medium_term" ? "btn-primary" : "btn-outline-primary")"
									@onclick="@(() => ChangeArtistTimeRange("medium_term"))">
								Last 6 Months
							</button>
							<button class="btn @(selectedArtistTimeRange == "long_term" ? "btn-primary" : "btn-outline-primary")"
									@onclick="@(() => ChangeArtistTimeRange("long_term"))">
								All Time
							</button>
						</div>
					</div>
				</div>
				<div class="card-body">
					@if (loadingArtists)
					{
						<div class="text-center p-4">
							<div class="spinner-border text-primary" role="status">
								<span class="visually-hidden">Loading...</span>
							</div>
						</div>
					}
					else if (topArtists != null && topArtists.Any())
					{
						<div class="artists-grid">
							@foreach (var artist in topArtists)
							{
								<div class="artist-card">
									@if (!string.IsNullOrEmpty(artist.ImageUrl))
									{
										<img src="@artist.ImageUrl" alt="@artist.Name" class="artist-image" />
									}
									else
									{
										<div class="artist-image-placeholder">
											<i class="fas fa-user"></i>
										</div>
									}
									<h4 class="artist-name">@artist.Name</h4>
									<div class="artist-genres">
										@foreach (var genre in artist.Genres?.Take(2) ?? Enumerable.Empty<string>())
										{
											<span class="genre-tag">@genre</span>
										}
									</div>
								</div>
							}
						</div>
					}
					else
					{
						<div class="text-center p-4">
							<p class="text-muted">No top artists found for this time period.</p>
						</div>
					}
				</div>
			</div>

			<!-- Recently Played -->
			<div class="content-card">
				<div class="card-header">
					<h3>Recently Played</h3>
				</div>
				<div class="card-body">
					@if (loadingRecentlyPlayed)
					{
						<div class="text-center p-4">
							<div class="spinner-border text-primary" role="status">
								<span class="visually-hidden">Loading...</span>
							</div>
						</div>
					}
					else if (recentlyPlayed != null && recentlyPlayed.Any())
					{
						<div class="track-list">
							@foreach (var track in recentlyPlayed)
							{
								<div class="track-item">
									@if (!string.IsNullOrEmpty(track.AlbumImageUrl))
									{
										<img src="@track.AlbumImageUrl" alt="Album Cover" class="track-image" />
									}
									<div class="track-details">
										<h5>@track.SongName</h5>
										<p>@track.Artist</p>
										<small>@track.Album</small>
									</div>
									<div class="track-actions">
										<div class="played-at">
											@GetFormattedTimeAgo(track.PlayedAt)
										</div>
									</div>
								</div>
							}
						</div>
					}
					else
					{
						<div class="text-center p-4">
							<p class="text-muted">No recently played tracks found.</p>
						</div>
					}
				</div>
			</div>

			<!-- Account Information -->
			<div class="content-card">
				<div class="card-header">
					<h3>Account Information</h3>
				</div>
				<div class="card-body p-4">
					<div class="account-details">
						<div class="detail-item">
							<div class="detail-label">Display Name</div>
							<div class="detail-value">@userDisplayName</div>
						</div>
						<div class="detail-item">
							<div class="detail-label">Email</div>
							<div class="detail-value">@userEmail</div>
						</div>
						<div class="detail-item">
							<div class="detail-label">Spotify ID</div>
							<div class="detail-value">@userProfile?.Id</div>
						</div>
						<div class="detail-item">
							<div class="detail-label">Profile URL</div>
							<div class="detail-value">
								<a href="https://open.spotify.com/user/@userProfile?.Id" target="_blank" class="spotify-link">
									<i class="fab fa-spotify me-1"></i> Open in Spotify
								</a>
							</div>
						</div>
					</div>
				</div>
			</div>
		}
	</div>
</div>

<style>
	/* Include all the existing styles from Dashboard.razor */
	/* Main Layout */
	body {
		background-color: #121212;
		margin: 0;
		padding: 0;
		color: white;
		font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
		overflow: hidden;
	}

	/* Sidebar Styles */
	.sidebar {
		position: fixed;
		left: 0;
		top: 0;
		bottom: 0;
		width: 220px;
		background-color: #000000;
		display: flex;
		flex-direction: column;
		border-right: 1px solid #282828;
		z-index: 100;
	}

	.sidebar-logo {
		padding: 20px;
		text-align: center;
	}

		.sidebar-logo img {
			max-width: 140px;
		}

	.sidebar-menu {
		flex: 1;
		padding: 10px 0;
	}

	.sidebar-item {
		display: flex;
		align-items: center;
		padding: 12px 20px;
		color: #b3b3b3;
		text-decoration: none;
		transition: all 0.2s;
		border-left: 3px solid transparent;
	}

		.sidebar-item:hover {
			color: white;
			background-color: #1a1a1a;
		}

		.sidebar-item.active {
			color: white;
			border-left: 3px solid #1db954;
			background-color: #1a1a1a;
		}

		.sidebar-item i {
			width: 24px;
			font-size: 18px;
			margin-right: 12px;
		}

	.sidebar-footer {
		padding: 15px;
		border-top: 1px solid #282828;
		display: flex;
		align-items: center;
		justify-content: space-between;
	}

	.user-profile {
		display: flex;
		align-items: center;
	}

		.user-profile img {
			width: 32px;
			height: 32px;
			border-radius: 50%;
			margin-right: 10px;
			object-fit: cover;
		}

		.user-profile span {
			font-size: 14px;
			color: #fff;
			max-width: 120px;
			white-space: nowrap;
			overflow: hidden;
			text-overflow: ellipsis;
		}

	.logout-btn {
		background: none;
		border: none;
		color: #b3b3b3;
		cursor: pointer;
		padding: 5px;
		transition: color 0.2s;
	}

		.logout-btn:hover {
			color: #1db954;
		}

	/* Main Content Area */
	.main-content {
		margin-left: 220px;
		padding: 20px;
		height: 100vh;
		overflow-y: auto;
	}

	.top-bar {
		display: flex;
		justify-content: space-between;
		align-items: center;
		margin-bottom: 30px;
	}

		.top-bar h1 {
			font-size: 28px;
			margin: 0;
			font-weight: 700;
		}

	.content-area {
		padding-bottom: 40px;
	}

	/* Loading Spinner */
	.loading-spinner {
		display: flex;
		justify-content: center;
		align-items: center;
		height: 70vh;
	}

	/* Content Card */
	.content-card {
		background-color: #181818;
		border-radius: 8px;
		overflow: hidden;
		box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
		margin-bottom: 30px;
	}

	.card-header {
		background-color: #282828;
		padding: 20px;
		border-bottom: 1px solid #333;
	}

		.card-header h3 {
			margin: 0;
			font-size: 20px;
			color: #fff;
			font-weight: 700;
		}

	.card-body {
		padding: 0;
	}

		.card-body.p-4 {
			padding: 1.5rem;
		}

	/* Button Group */
	.btn-group {
		display: flex;
	}

	.btn {
		font-size: 13px;
		padding: 6px 12px;
		border-radius: 4px;
		margin-left: 5px;
	}

	.btn-primary {
		background-color: #1db954;
		border-color: #1db954;
	}

	.btn-outline-primary {
		border-color: #1db954;
		color: #1db954;
		background-color: transparent;
	}

		.btn-outline-primary:hover {
			background-color: #1db954;
			color: #fff;
		}

	/* Track List */
	.track-list {
		list-style: none;
		margin: 0;
		padding: 0;
	}

	.track-item {
		display: flex;
		align-items: center;
		padding: 12px 20px;
		border-bottom: 1px solid #282828;
		transition: background-color 0.2s ease;
	}

		.track-item:last-child {
			border-bottom: none;
		}

		.track-item:hover {
			background-color: #282828;
		}

	.track-image {
		width: 50px;
		height: 50px;
		border-radius: 4px;
		margin-right: 15px;
		object-fit: cover;
	}

	.track-details {
		flex-grow: 1;
		min-width: 0;
	}

		.track-details h5 {
			margin: 0 0 3px 0;
			font-size: 16px;
			color: #fff;
			white-space: nowrap;
			overflow: hidden;
			text-overflow: ellipsis;
		}

		.track-details p {
			margin: 0 0 3px 0;
			font-size: 14px;
			color: #b3b3b3;
			white-space: nowrap;
			overflow: hidden;
			text-overflow: ellipsis;
		}

		.track-details small {
			font-size: 12px;
			color: #b3b3b3;
		}

	.track-actions {
		margin-left: auto;
	}

	/* Profile-specific styles */
	.profile-header {
		display: flex;
		align-items: center;
		padding: 20px;
		background-color: rgba(30, 30, 30, 0.8);
		border-radius: 8px;
		margin-bottom: 30px;
		box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
	}

	.profile-image-container {
		margin-right: 30px;
	}

	.profile-image {
		width: 180px;
		height: 180px;
		border-radius: 50%;
		object-fit: cover;
		box-shadow: 0 4px 60px rgba(0, 0, 0, 0.5);
		border: 4px solid #282828;
	}

	.profile-info {
		flex: 1;
	}

		.profile-info h2 {
			font-size: 42px;
			margin: 0 0 5px 0;
			font-weight: 700;
		}

	.profile-email {
		font-size: 16px;
		color: #b3b3b3;
		margin-bottom: 20px;
	}

	.profile-stats {
		display: flex;
		margin-top: 20px;
	}

	.stat-item {
		margin-right: 40px;
		text-align: center;
	}

	.stat-number {
		font-size: 24px;
		font-weight: 700;
		color: #1db954;
	}

	.stat-label {
		font-size: 14px;
		color: #b3b3b3;
		margin-top: 5px;
	}

	/* Artists Grid */
	.artists-grid {
		display: grid;
		grid-template-columns: repeat(auto-fill, minmax(180px, 1fr));
		gap: 20px;
		padding: 20px;
	}

	.artist-card {
		background-color: #282828;
		border-radius: 8px;
		overflow: hidden;
		transition: transform 0.3s ease, background-color 0.3s ease;
		cursor: pointer;
	}

		.artist-card:hover {
			background-color: #333;
			transform: translateY(-5px);
		}

	.artist-image,
	.artist-image-placeholder {
		width: 100%;
		height: 180px;
		object-fit: cover;
		display: flex;
		align-items: center;
		justify-content: center;
		background-color: #333;
	}

		.artist-image-placeholder i {
			font-size: 48px;
			color: #b3b3b3;
		}

	.artist-name {
		padding: 12px 12px 5px;
		font-size: 16px;
		font-weight: 600;
		margin: 0;
		white-space: nowrap;
		overflow: hidden;
		text-overflow: ellipsis;
	}

	.artist-genres {
		padding: 0 12px 12px;
		display: flex;
		flex-wrap: wrap;
		gap: 5px;
	}

	.genre-tag {
		font-size: 11px;
		background-color: rgba(29, 185, 84, 0.3);
		color: #1db954;
		padding: 3px 8px;
		border-radius: 10px;
	}

	/* Account Details */
	.account-details {
		display: grid;
		grid-template-columns: 1fr 1fr;
		gap: 20px;
	}

	.detail-item {
		background-color: rgba(255, 255, 255, 0.05);
		border-radius: 5px;
		padding: 15px;
	}

	.detail-label {
		font-size: 12px;
		color: #b3b3b3;
		margin-bottom: 5px;
	}

	.detail-value {
		font-size: 16px;
		word-break: break-word;
	}

	.spotify-link {
		color: #1db954;
		text-decoration: none;
		display: inline-flex;
		align-items: center;
	}

		.spotify-link:hover {
			text-decoration: underline;
		}

	.played-at {
		font-size: 12px;
		color: #b3b3b3;
	}

	/* Animations */
	@@keyframes scroll-text {
		0% {
			transform: translateX(0);
		}

		100% {
			transform: translateX(-50%);
		}
	}

	/* Responsive adjustments */
	@@media (max-width: 992px) {
		.profile-header {
			flex-direction: column;
			text-align: center;
		}

		.profile-image-container {
			margin-right: 0;
			margin-bottom: 20px;
		}

		.profile-stats {
			justify-content: center;
		}

		.account-details {
			grid-template-columns: 1fr;
		}
	}

	@@media (max-width: 768px) {
		.sidebar {
			width: 60px;
			overflow: hidden;
		}

		.sidebar-item span,
		.user-profile span {
			display: none;
		}

		.sidebar-item {
			justify-content: center;
			padding: 15px 0;
		}

			.sidebar-item i {
				margin-right: 0;
			}

		.sidebar-logo {
			display: none;
		}

		.sidebar-footer {
			justify-content: center;
			padding: 10px 0;
		}

		.user-profile img {
			margin-right: 0;
		}

		.main-content {
			margin-left: 60px;
		}

		.artists-grid {
			grid-template-columns: repeat(auto-fill, minmax(140px, 1fr));
		}
	}
</style>

@code {
	// User profile data
	private SpotifyUserProfile userProfile;
	private string userDisplayName = "Spotify User";
	private string userEmail = "";
	private string profileImageUrl = "images/default-profile.jpg";

	// UI state
	private bool isLoading = true;
	private bool hasError = false;
	private string errorMessage = "";

	// Artist data
	private List<AuthService.SpotifyArtist> topArtists = new();
	private string selectedArtistTimeRange = "medium_term";
	private bool loadingArtists = false;

	// Track data
	private List<SpotifyDataDTO> topTracks = new();
	private List<AuthService.RecentlyPlayedTrack> recentlyPlayed = new();
	private bool loadingRecentlyPlayed = false;

	protected override async Task OnInitializedAsync()
	{
		try
		{
			isLoading = true;

			// Get token from storage
			var accessToken = await AuthService.GetValidAccessTokenAsync();

			if (!string.IsNullOrEmpty(accessToken))
			{
				// Load user profile data
				await LoadUserProfile();

				// Load artist and track data
				await LoadTopArtists(selectedArtistTimeRange);
				await LoadTopTracks();
				await LoadRecentlyPlayed();
			}
			else
			{
				hasError = true;
				errorMessage = "Your session has expired. Please login again.";
			}
		}
		catch (Exception ex)
		{
			await JSRuntime.InvokeVoidAsync("console.error", $"Error initializing profile: {ex.Message}");
			hasError = true;
			errorMessage = "There was a problem loading your profile. Please try again.";
		}
		finally
		{
			isLoading = false;
			StateHasChanged();
		}
	}

	private async Task LoadUserProfile()
	{
		try
		{
			userProfile = await AuthService.GetUserProfile();
			if (userProfile != null)
			{
				userDisplayName = userProfile.DisplayName ?? "Spotify User";
				userEmail = userProfile.Email ?? "";

				if (userProfile.Images != null && userProfile.Images.Any() && !string.IsNullOrEmpty(userProfile.Images.First().Url))
				{
					profileImageUrl = userProfile.Images.First().Url;
				}
				else if (!string.IsNullOrEmpty(userProfile.ProfilePictureUrl))
				{
					profileImageUrl = userProfile.ProfilePictureUrl;
				}
			}
		}
		catch (Exception ex)
		{
			await JSRuntime.InvokeVoidAsync("console.error", $"Error loading user profile: {ex.Message}");
			// If there's an error loading the profile, keep the default values
		}
	}

	private async Task LoadTopArtists(string timeRange)
	{
		loadingArtists = true;
		StateHasChanged();

		try
		{
			topArtists = await AuthService.GetTopArtistsAsync(timeRange);
		}
		catch (Exception ex)
		{
			await JSRuntime.InvokeVoidAsync("console.error", $"Error loading top artists: {ex.Message}");
			topArtists = new List<AuthService.SpotifyArtist>();
		}
		finally
		{
			loadingArtists = false;
			StateHasChanged();
		}
	}

	private async Task LoadTopTracks()
	{
		try
		{
			// Load top tracks for stats
			topTracks = await AuthService.GetTopTracksAsync("medium_term");
		}
		catch (Exception ex)
		{
			await JSRuntime.InvokeVoidAsync("console.error", $"Error loading top tracks: {ex.Message}");
			topTracks = new List<SpotifyDataDTO>();
		}
	}

	private async Task LoadRecentlyPlayed()
	{
		loadingRecentlyPlayed = true;
		StateHasChanged();

		try
		{
			recentlyPlayed = await AuthService.GetRecentlyPlayedAsync();
		}
		catch (Exception ex)
		{
			await JSRuntime.InvokeVoidAsync("console.error", $"Error loading recently played: {ex.Message}");
			recentlyPlayed = new List<AuthService.RecentlyPlayedTrack>();
		}
		finally
		{
			loadingRecentlyPlayed = false;
			StateHasChanged();
		}
	}

	private async Task ChangeArtistTimeRange(string timeRange)
	{
		if (selectedArtistTimeRange == timeRange) return;

		selectedArtistTimeRange = timeRange;
		await LoadTopArtists(timeRange);
	}

	private string GetFormattedTimeAgo(DateTime playedAt)
	{
		var timeSpan = DateTime.Now - playedAt;

		if (timeSpan.TotalMinutes < 1)
			return "Just now";
		if (timeSpan.TotalMinutes < 60)
			return $"{(int)timeSpan.TotalMinutes}m ago";
		if (timeSpan.TotalHours < 24)
			return $"{(int)timeSpan.TotalHours}h ago";

		return $"{(int)timeSpan.TotalDays}d ago";
	}

	private async Task RetryLoading()
	{
		try
		{
			isLoading = true;
			hasError = false;
			StateHasChanged();

			await LoadUserProfile();
			await LoadTopArtists(selectedArtistTimeRange);
			await LoadTopTracks();
			await LoadRecentlyPlayed();
		}
		catch (Exception ex)
		{
			await JSRuntime.InvokeVoidAsync("console.error", $"Error reloading profile: {ex.Message}");
			hasError = true;
			errorMessage = "Failed to reload your profile data.";
		}
		finally
		{
			isLoading = false;
			StateHasChanged();
		}
	}

	private async Task Login()
	{
		await AuthService.LoginAsync();
	}

	private void Logout()
	{
		try
		{
			AuthService.LogoutAsync();
			NavigationManager.NavigateTo("/");
		}
		catch (Exception ex)
		{
			JSRuntime.InvokeVoidAsync("console.error", $"Error logging out: {ex.Message}");
		}
	}

	// Additional models needed for the profile page
	public class SpotifyArtist
	{
		public string Name { get; set; }
		public string ImageUrl { get; set; }
		public List<string> Genres { get; set; } = new List<string>();
	}

	public class RecentlyPlayedTrack : SpotifyDataDTO
	{
		public DateTime PlayedAt { get; set; }
	}
}