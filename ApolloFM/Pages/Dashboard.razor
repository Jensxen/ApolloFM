@page "/dashboard"
@using FM.Application.Services
@using FM.Application.Services.ServiceDTO
@inject AuthService AuthService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@implements IDisposable

<!-- Sidebar -->
<div class="sidebar">
    <div class="sidebar-logo">
        <img src="images/ApolloFM.png" alt="ApolloFM Logo" />
    </div>

    <div class="sidebar-menu">
        <NavLink class="sidebar-item" href="dashboard" Match="NavLinkMatch.All">
            <i class="fas fa-home"></i>
            <span>Dashboard</span>
        </NavLink>

        <NavLink class="sidebar-item" href="forum">
            <i class="fas fa-comments"></i>
            <span>Forum</span>
        </NavLink>

        <NavLink class="sidebar-item" href="discover">
            <i class="fas fa-compass"></i>
            <span>Discover</span>
        </NavLink>

        <NavLink class="sidebar-item" href="playlists">
            <i class="fas fa-list"></i>
            <span>Playlists</span>
        </NavLink>

        <NavLink class="sidebar-item" href="profile">
            <i class="fas fa-user"></i>
            <span>Profile</span>
        </NavLink>
    </div>

    <div class="sidebar-footer">
        <div class="user-profile">
            <img src="@userProfilePictureUrl" alt="User Profile" />
            <span>@userName</span>
        </div>
        <button class="logout-btn" @onclick="Logout">
            <i class="fas fa-sign-out-alt"></i>
        </button>
    </div>
</div>

<!-- Main Content -->
<div class="main-content">
    <div class="top-bar">
        <h1>Dashboard</h1>
        <div class="user-profile-mini">
            <img src="@userProfilePictureUrl" alt="User Profile Picture" />
        </div>
    </div>

    <div class="content-area">
        @if (isLoading)
        {
            <div class="loading-spinner">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
        }
        else if (hasError)
        {
            <div class="alert alert-danger">
                <p>@errorMessage</p>
                <div class="mt-3">
                    <button class="btn btn-primary me-2" @onclick="RetryLoading">Retry</button>
                    <button class="btn btn-success" @onclick="Login">Login to Spotify</button>
                </div>
            </div>
        }
        else
        {
            <div>
                <!-- Now Playing Section -->
                @if (nowPlayingTrack != null)
                {
                    <div class="now-playing-card">
                        <span class="now-playing-label">Now Playing</span>

                        @if (!string.IsNullOrEmpty(nowPlayingTrack.AlbumImageUrl))
                        {
                            <img src="@nowPlayingTrack.AlbumImageUrl" alt="Album Cover" class="album-image" />
                        }
                        <div class="track-info">
                            <div class="scrolling-container">
                                @if (!string.IsNullOrEmpty(nowPlayingTrack.SongName) && nowPlayingTrack.SongName.Length > 20)
                                {
                                    <div class="scrolling-text">
                                        <span>@nowPlayingTrack.SongName</span>
                                        <span class="spacer">•</span>
                                        <span>@nowPlayingTrack.SongName</span>
                                    </div>
                                }
                                else
                                {
                                    <div>@nowPlayingTrack?.SongName</div>
                                }
                            </div>

                            <div class="scrolling-container">
                                @if (!string.IsNullOrEmpty(nowPlayingTrack.Artist) && nowPlayingTrack.Artist.Length > 20)
                                {
                                    <div class="scrolling-text artist">
                                        <span>@nowPlayingTrack.Artist</span>
                                        <span class="spacer">•</span>
                                        <span>@nowPlayingTrack.Artist</span>
                                    </div>
                                }
                                else
                                {
                                    <div class="artist">@nowPlayingTrack?.Artist</div>
                                }
                            </div>

                            <div class="progress-bar-container">
                                <div class="progress-bar-fill" style="width: @(PlaybackProgress)%;"></div>
                            </div>
                        </div>
                    </div>
                }
                else
                {
                    <p class="no-track-message">No song is currently playing.</p>
                }

                <!-- Top Tracks Section -->
                <div class="content-card">
                    <div class="card-header">
                        <div class="d-flex justify-content-between align-items-center">
                            <h3>Your Top Tracks</h3>
                            <div class="btn-group">
                                <button class="btn @(selectedTimeRange == "short_term" ? "btn-primary" : "btn-outline-primary")"
                                        @onclick="@(() => ChangeTimeRange("short_term"))">
                                    Last 4 Weeks
                                </button>
                                <button class="btn @(selectedTimeRange == "medium_term" ? "btn-primary" : "btn-outline-primary")"
                                        @onclick="@(() => ChangeTimeRange("medium_term"))">
                                    Last 6 Months
                                </button>
                                <button class="btn @(selectedTimeRange == "long_term" ? "btn-primary" : "btn-outline-primary")"
                                        @onclick="@(() => ChangeTimeRange("long_term"))">
                                    All Time
                                </button>
                            </div>
                        </div>
                    </div>
                    <div class="card-body">
                        @if (loadingTopTracks)
                        {
                            <div class="text-center p-4">
                                <div class="spinner-border text-primary" role="status">
                                    <span class="visually-hidden">Loading...</span>
                                </div>
                            </div>
                        }
                        else if (topTracks != null && topTracks.Any())
                        {
                            <div class="track-list">
                                @for (int i = 0; i < topTracks.Count; i++)
                                {
                                    var track = topTracks[i];
                                    var index = i;

                                    <div class="track-item">
                                        <div class="track-number">
                                            <span>@(index + 1)</span>
                                        </div>
                                        @if (!string.IsNullOrEmpty(track.AlbumImageUrl))
                                        {
                                            <img src="@track.AlbumImageUrl" alt="Album Cover" class="track-image" />
                                        }
                                        <div class="track-details">
                                            <h5>@track.SongName</h5>
                                            <p>@track.Artist</p>
                                            <small>@track.Album</small>
                                        </div>
                                        <div class="track-actions">
                                            @if (!string.IsNullOrEmpty(track.SongUrl))
                                            {
                                                <a href="@GetSpotifyUriFromUrl(track.SongUrl)" class="play-button">
                                                    <i class="fab fa-spotify me-1"></i> Play
                                                </a>
                                            }
                                        </div>
                                    </div>
                                }
                            </div>
                        }
                        else
                        {
                            <div class="text-center p-4">
                                <p class="text-muted">No top tracks found for this time period.</p>
                            </div>
                        }
                    </div>
                </div>
            </div>
        }
    </div>
</div>

<style>
    /* Main Layout */
    body {
        background-color: #121212;
        margin: 0;
        padding: 0;
        color: white;
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        overflow: hidden;
    }

    /* Sidebar Styles */
    .sidebar {
        position: fixed;
        left: 0;
        top: 0;
        bottom: 0;
        width: 220px;
        background-color: #000000;
        display: flex;
        flex-direction: column;
        border-right: 1px solid #282828;
        z-index: 100;
    }

    .sidebar-logo {
        padding: 20px;
        text-align: center;
    }

        .sidebar-logo img {
            max-width: 140px;
        }

    .sidebar-menu {
        flex: 1;
        padding: 10px 0;
    }

    .sidebar-item {
        display: flex;
        align-items: center;
        padding: 12px 20px;
        color: #b3b3b3;
        text-decoration: none;
        transition: all 0.2s;
        border-left: 3px solid transparent;
    }

        .sidebar-item:hover {
            color: white;
            background-color: #1a1a1a;
        }

        .sidebar-item.active {
            color: white;
            border-left: 3px solid #1db954;
            background-color: #1a1a1a;
        }

        .sidebar-item i {
            width: 24px;
            font-size: 18px;
            margin-right: 12px;
        }

    .sidebar-footer {
        padding: 15px;
        border-top: 1px solid #282828;
        display: flex;
        align-items: center;
        justify-content: space-between;
    }

    .user-profile {
        display: flex;
        align-items: center;
    }

        .user-profile img {
            width: 32px;
            height: 32px;
            border-radius: 50%;
            margin-right: 10px;
            object-fit: cover;
        }

        .user-profile span {
            font-size: 14px;
            color: #fff;
            max-width: 120px;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
        }

    .logout-btn {
        background: none;
        border: none;
        color: #b3b3b3;
        cursor: pointer;
        padding: 5px;
        transition: color 0.2s;
    }

        .logout-btn:hover {
            color: #1db954;
        }

    /* Main Content Area */
    .main-content {
        margin-left: 220px;
        padding: 20px;
        height: 100vh;
        overflow-y: auto;
    }

    .top-bar {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 30px;
    }

        .top-bar h1 {
            font-size: 28px;
            margin: 0;
            font-weight: 700;
        }

    .user-profile-mini {
        display: none; /* Hidden because we have it on sidebar */
    }

        .user-profile-mini img {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            object-fit: cover;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
        }

    .content-area {
        padding-bottom: 40px;
    }

    /* Loading Spinner */
    .loading-spinner {
        display: flex;
        justify-content: center;
        align-items: center;
        height: 70vh;
    }

    /* Now Playing Section */
    .now-playing-card {
        display: flex;
        align-items: center;
        width: 100%;
        background-color: #1e1e1e;
        border-radius: 8px;
        padding: 15px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.2);
        position: relative;
        margin-bottom: 30px;
    }

    .now-playing-label {
        position: absolute;
        top: -10px;
        left: 10px;
        background-color: #1db954;
        color: white;
        font-size: 12px;
        padding: 2px 8px;
        border-radius: 4px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
        font-weight: 500;
    }

    .album-image {
        width: 60px;
        height: 60px;
        object-fit: cover;
        border-radius: 4px;
        margin-right: 15px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);
    }

    .track-info {
        flex-grow: 1;
        overflow: hidden;
    }

    .no-track-message {
        color: #b3b3b3;
        font-size: 14px;
        margin: 0 0 30px 0;
    }

    .progress-bar-container {
        height: 4px;
        background-color: #535353;
        border-radius: 2px;
        margin-top: 8px;
        overflow: hidden;
    }

    .progress-bar-fill {
        height: 100%;
        background-color: #1db954;
        border-radius: 2px;
    }

    /* Content Card */
    .content-card {
        background-color: #181818;
        border-radius: 8px;
        overflow: hidden;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        margin-bottom: 30px;
    }

    .card-header {
        background-color: #282828;
        padding: 20px;
        border-bottom: 1px solid #333;
    }

        .card-header h3 {
            margin: 0;
            font-size: 20px;
            color: #fff;
            font-weight: 700;
        }

    .card-body {
        padding: 0;
    }

    /* Track List */
    .track-list {
        list-style: none;
        margin: 0;
        padding: 0;
    }

    .track-item {
        display: flex;
        align-items: center;
        padding: 12px 20px;
        border-bottom: 1px solid #282828;
        transition: background-color 0.2s ease;
    }

        .track-item:last-child {
            border-bottom: none;
        }

        .track-item:hover {
            background-color: #282828;
        }

    .track-number {
        width: 30px;
        color: #b3b3b3;
        text-align: right;
        font-size: 14px;
        padding-right: 15px;
    }

    .track-image {
        width: 40px;
        height: 40px;
        border-radius: 4px;
        margin-right: 15px;
        object-fit: cover;
    }

    .track-details {
        flex-grow: 1;
        min-width: 0;
    }

        .track-details h5 {
            margin: 0 0 3px 0;
            font-size: 16px;
            color: #fff;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
        }

        .track-details p {
            margin: 0 0 3px 0;
            font-size: 14px;
            color: #b3b3b3;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
        }

        .track-details small {
            font-size: 12px;
            color: #b3b3b3;
        }

    .track-actions {
        margin-left: 15px;
    }

    .play-button {
        background-color: transparent;
        border: 1px solid #1db954;
        color: #1db954;
        border-radius: 4px;
        padding: 6px 12px;
        font-size: 13px;
        text-decoration: none;
        transition: all 0.2s;
        display: inline-block;
    }

        .play-button:hover {
            background-color: #1db954;
            color: #fff;
        }

    /* Button Group */
    .btn-group {
        display: flex;
    }

    .btn {
        font-size: 13px;
        padding: 6px 12px;
        border-radius: 4px;
        margin-left: 5px;
    }

    .btn-primary {
        background-color: #1db954;
        border-color: #1db954;
    }

    .btn-outline-primary {
        border-color: #1db954;
        color: #1db954;
        background-color: transparent;
    }

        .btn-outline-primary:hover {
            background-color: #1db954;
            color: #fff;
        }

    /* Scrolling text */
    .scrolling-container {
        width: 100%;
        overflow: hidden;
        white-space: nowrap;
        position: relative;
    }

    .scrolling-text {
        display: inline-block;
        animation: scroll-text 10s linear infinite;
    }

    .artist {
        font-size: 14px;
        color: #b3b3b3;
    }

    .spacer {
        display: inline-block;
        margin: 0 8px;
        opacity: 0.6;
    }

    /* Animations */
    @@keyframes scroll-text {
        0%

    {
        transform: translateX(0);
    }

    100% {
        transform: translateX(-50%);
    }

    }

    /* Responsive adjustments */
    @@media (max-width: 768px) {
        .sidebar

    {
        width: 60px;
        overflow: hidden;
    }

    .sidebar-item span,
    .user-profile span {
        display: none;
    }

    .sidebar-item {
        justify-content: center;
        padding: 15px 0;
    }

        .sidebar-item i {
            margin-right: 0;
        }

    .sidebar-logo {
        display: none;
    }

    .sidebar-footer {
        justify-content: center;
        padding: 10px 0;
    }

    .user-profile img {
        margin-right: 0;
    }

    .main-content {
        margin-left: 60px;
    }

    .user-profile-mini {
        display: block;
    }

    .top-bar {
        margin-bottom: 20px;
    }

    }
</style>

@code {
    private string userProfilePictureUrl = "images/default-profile.jpg"; // Default profile picture
    private string userName = "Spotify User";
    private bool isLoading = true;
    private bool hasError = false;
    private string errorMessage = "";
    private List<SpotifyDataDTO> topTracks;

    // For top tracks filtering
    private string selectedTimeRange = "medium_term";
    private bool loadingTopTracks = false;

    // Now Playing Track
    private SpotifyDataDTO? nowPlayingTrack;
    private string? currentSongId; // Track the current song ID to detect changes

    // Timer for polling
    private System.Threading.Timer? _pollingTimer;
    private readonly int _pollingIntervalMs = 3000; // Poll every 3 seconds

    // Playback progress
    private double PlaybackProgress => nowPlayingTrack != null && nowPlayingTrack.Duration.TotalSeconds > 0
        ? (nowPlayingTrack.Progress.TotalSeconds / nowPlayingTrack.Duration.TotalSeconds) * 100
        : 0;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            isLoading = true;

            // Get token from storage (automatically uses stored tokens)
            var accessToken = await AuthService.GetValidAccessTokenAsync();

            if (!string.IsNullOrEmpty(accessToken))
            {
                // Fetch user profile data
                var userProfile = await AuthService.GetUserProfile();
                if (userProfile != null)
                {
                    Console.WriteLine($"User profile fetched: {userProfile.DisplayName}");
                    userName = userProfile.DisplayName ?? "Spotify User";

                    // Get the profile picture URL more robustly
                    if (userProfile.Images != null && userProfile.Images.Any() && !string.IsNullOrEmpty(userProfile.Images.First().Url))
                    {
                        userProfilePictureUrl = userProfile.Images.First().Url;
                        Console.WriteLine($"Profile picture URL set: {userProfilePictureUrl}");
                    }
                    else if (!string.IsNullOrEmpty(userProfile.ProfilePictureUrl))
                    {
                        userProfilePictureUrl = userProfile.ProfilePictureUrl;
                        Console.WriteLine($"Profile picture URL set from ProfilePictureUrl: {userProfilePictureUrl}");
                    }
                    else
                    {
                        Console.WriteLine("No profile picture found, using default.");
                    }
                }

                // Load dashboard data
                await LoadTopTracks(selectedTimeRange);
                await LoadNowPlaying();

                // Start the polling timer
                StartPollingForNowPlaying();
            }
            else
            {
                // No valid token and couldn't refresh, show error
                hasError = true;
                errorMessage = "Your session has expired. Please login again.";
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", $"Error initializing dashboard: {ex.Message}");
            hasError = true;
            errorMessage = "There was a problem loading the dashboard. Please try again.";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private string GetSpotifyUriFromUrl(string url)
    {
        if (string.IsNullOrEmpty(url))
            return "#";

        // Example conversion:
        // From: https://open.spotify.com/track/1234567890
        // To:   spotify:track:1234567890

        try
        {
            // Parse the URL to extract track ID
            if (url.Contains("open.spotify.com"))
            {
                // Remove any query parameters
                int queryIndex = url.IndexOf('?');
                if (queryIndex > 0)
                {
                    url = url.Substring(0, queryIndex);
                }

                // Split by slashes and get the last part (ID)
                string[] parts = url.Split('/');
                string id = parts[parts.Length - 1];

                // Determine the type (track, album, artist, etc.)
                string type = "track"; // Default
                if (url.Contains("/album/"))
                    type = "album";
                else if (url.Contains("/artist/"))
                    type = "artist";
                else if (url.Contains("/playlist/"))
                    type = "playlist";

                // Return the Spotify URI
                return $"spotify:{type}:{id}";
            }

            // If it doesn't match the expected format, return the original URL
            return url;
        }
        catch
        {
            // If anything goes wrong, return the original URL
            return url;
        }
    }

    private void StartPollingForNowPlaying()
    {
        // Stop existing timer if any
        _pollingTimer?.Dispose();

        // Create a new timer that calls UpdateNowPlaying every _pollingIntervalMs
        _pollingTimer = new System.Threading.Timer(
            async _ => await UpdateNowPlaying(),
            null,
            _pollingIntervalMs, // Initial delay
            _pollingIntervalMs  // Interval
        );
    }

    private async Task UpdateNowPlaying()
    {
        try
        {
            var updatedTrack = await AuthService.GetCurrentlyPlayingTrackAsync();

            // Check if the track has changed (different ID or play state changed)
            bool trackChanged = (updatedTrack?.SongUrl != currentSongId) ||
                                (nowPlayingTrack?.isPlaying != updatedTrack?.isPlaying);

            if (trackChanged)
            {
                // Update our reference to the current track
                nowPlayingTrack = updatedTrack;
                currentSongId = updatedTrack?.SongUrl;

                // Force UI update on the UI thread
                await InvokeAsync(StateHasChanged);
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", $"Error updating now playing track: {ex.Message}");
            // Don't update the UI on error - keep showing the last known track
        }
    }

    private async Task LoadTopTracks(string timeRange)
    {
        loadingTopTracks = true;
        StateHasChanged();

        try
        {
            await JSRuntime.InvokeVoidAsync("console.log", $"Loading top tracks for time range: {timeRange}");
            topTracks = await AuthService.GetTopTracksAsync(timeRange);
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", $"Error loading top tracks: {ex.Message}");
            topTracks = new List<SpotifyDataDTO>();
        }
        finally
        {
            loadingTopTracks = false;
            StateHasChanged();
        }
    }

    private async Task LoadNowPlaying()
    {
        try
        {
            nowPlayingTrack = await AuthService.GetCurrentlyPlayingTrackAsync();
            currentSongId = nowPlayingTrack?.SongUrl; // Store current song ID
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", $"Error loading now playing track: {ex.Message}");
            nowPlayingTrack = null;
        }
    }

    private async Task ChangeTimeRange(string timeRange)
    {
        if (selectedTimeRange == timeRange) return;

        selectedTimeRange = timeRange;
        await LoadTopTracks(timeRange);
    }

    private async Task RetryLoading()
    {
        await LoadTopTracks(selectedTimeRange);
    }

    private async Task Login()
    {
        await AuthService.LoginAsync();
    }

    private void Logout()
    {
        try
        {
            AuthService.LogoutAsync();
            NavigationManager.NavigateTo("/");
        }
        catch (Exception ex)
        {
            JSRuntime.InvokeVoidAsync("console.error", $"Error logging out: {ex.Message}");
        }
    }

    public void Dispose()
    {
        // Clean up the timer when component is disposed
        _pollingTimer?.Dispose();
        _pollingTimer = null;
    }
}