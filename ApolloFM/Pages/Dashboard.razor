@page "/dashboard"
@using FM.Application.Services
@using FM.Application.Services.ServiceDTO
@inject AuthService AuthService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<div class="dashboard-container">
    <h1>Your Spotify Dashboard</h1>

    @if (isLoading)
    {
        <div class="spinner-container">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else if (hasError)
    {
        <div class="alert alert-danger">
            <p>@errorMessage</p>
            <button class="btn btn-primary" @onclick="RetryLoading">Retry</button>
        </div>
    }
    else
    {
        <div class="user-profile-section">
            @if (userProfile != null)
            {
                <div class="user-profile">
                    <h2>Welcome, @userProfile.DisplayName!</h2>
                    @if (userProfile.Images != null && userProfile.Images.Any())
                    {
                        <img src="@userProfile.Images.First().Url" alt="Profile picture" class="profile-picture" />
                    }
                </div>
            }
        </div>

        <div class="top-tracks-section">
            <h3>Your Top Tracks</h3>
            @if (topTracks != null && topTracks.Any())
            {
                <div class="track-list">
                    @foreach (var track in topTracks)
                    {
                        <div class="track-item">
                            <div class="track-image">
                                <img src="@track.AlbumImageUrl" alt="Album cover" />
                            </div>
                            <div class="track-info">
                                <h4>@track.SongName</h4>
                                <p>@track.Artist</p>
                                <p>@track.Album</p>
                            </div>
                        </div>
                    }
                </div>
            }
            else
            {
                <p>No top tracks found.</p>
            }
        </div>

        <div class="currently-playing-section">
            <h3>Currently Playing</h3>
            @if (currentlyPlaying != null)
            {
                <div class="currently-playing-track">
                    <div class="track-image">
                        <img src="@currentlyPlaying.AlbumImageUrl" alt="Album cover" />
                    </div>
                    <div class="track-info">
                        <h4>@currentlyPlaying.SongName</h4>
                        <p>@currentlyPlaying.Artist</p>
                        <p>@currentlyPlaying.Album</p>
                        <div class="progress">
                            <div class="progress-bar" role="progressbar"
                                 style="width: @((currentlyPlaying.Progress.TotalSeconds / currentlyPlaying.Duration.TotalSeconds) * 100)%"
                                 aria-valuenow="@currentlyPlaying.Progress.TotalSeconds"
                                 aria-valuemin="0"
                                 aria-valuemax="@currentlyPlaying.Duration.TotalSeconds">
                            </div>
                        </div>
                        <p>@FormatTimeSpan(currentlyPlaying.Progress) / @FormatTimeSpan(currentlyPlaying.Duration)</p>
                    </div>
                </div>
            }
            else
            {
                <p>No track is currently playing.</p>
            }
        </div>

        <div class="actions-section">
            <button class="btn btn-danger" @onclick="Logout">Logout</button>
        </div>
    }
</div>

@code {
    private bool isLoading = true;
    private bool hasError = false;
    private string errorMessage = "";
    private SpotifyUserProfile userProfile;
    private List<SpotifyDataDTO> topTracks;
    private SpotifyDataDTO currentlyPlaying;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        isLoading = true;
        hasError = false;

        try
        {
            await JSRuntime.InvokeVoidAsync("console.log", "Dashboard: Loading data");

            // Load user profile
            userProfile = await AuthService.GetUserProfile();

            // Load top tracks
            topTracks = await AuthService.GetTopTracksAsync();

            // Load currently playing
            currentlyPlaying = await AuthService.GetCurrentlyPlayingTrackAsync();

            await JSRuntime.InvokeVoidAsync("console.log", "Dashboard: Data loaded successfully");
        }
        catch (Exception ex)
        {
            hasError = true;
            errorMessage = "Failed to load Spotify data. Please try again.";
            await JSRuntime.InvokeVoidAsync("console.error", "Dashboard error:", ex.Message);
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task RetryLoading()
    {
        await LoadData();
    }

    private async Task Logout()
    {
        try
        {
            await AuthService.LogoutAsync();
            NavigationManager.NavigateTo("/");
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", "Logout error:", ex.Message);
        }
    }

    private string FormatTimeSpan(TimeSpan timeSpan)
    {
        return $"{(int)timeSpan.TotalMinutes}:{timeSpan.Seconds:00}";
    }
}
