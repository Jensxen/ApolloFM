@page "/authentication/login-callback"
@using Microsoft.AspNetCore.Components.Authorization
@using FM.Application.Services
@using System.Security.Claims
@using Blazored.LocalStorage
@inject NavigationManager Navigation
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject AuthenticationStateProvider AuthStateProvider

<div class="auth-callback-container">
    <h3>Logging you in...</h3>
    <div class="spinner-border" role="status">
        <span class="visually-hidden">Loading...</span>
    </div>
</div>

@code {
    protected override async Task OnInitializedAsync()
    {
        try
        {
            var uri = Navigation.ToAbsoluteUri(Navigation.Uri);
            var query = System.Web.HttpUtility.ParseQueryString(uri.Query);

            Console.WriteLine("Processing login callback");
            var accessToken = query["access_token"];
            var returnUrl = query["returnUrl"];

            if (!string.IsNullOrEmpty(accessToken))
            {
                Console.WriteLine($"Received access token: {accessToken.Substring(0, Math.Min(10, accessToken.Length))}...");

                // Save token in local storage
                await LocalStorage.SetItemAsync("spotify_access_token", accessToken);
                Console.WriteLine("Token saved to localStorage");

                // Update the authentication state
                if (AuthStateProvider is SpotifyAuthenticationStateProvider spotifyAuth)
                {
                    await spotifyAuth.MarkUserAsAuthenticated(accessToken);
                    Console.WriteLine("Authentication state updated via SpotifyAuthenticationStateProvider");
                }

                // Navigate to the return URL or fallback
                if (!string.IsNullOrEmpty(returnUrl))
                {
                    Console.WriteLine($"Navigating to: /{returnUrl}");
                    Navigation.NavigateTo($"/{returnUrl}", forceLoad: true);
                }
                else
                {
                    Console.WriteLine("Navigating to dashboard");
                    Navigation.NavigateTo("/dashboard", forceLoad: true);
                }
            }
            else
            {
                Console.WriteLine("No access token found in callback");
                Navigation.NavigateTo("/login?error=missing_token", forceLoad: true);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in login callback: {ex.Message}");
            Navigation.NavigateTo("/login?error=callback_error", forceLoad: true);
        }


    }

    public class SpotifyAuthenticationStateProvider : AuthenticationStateProvider
{
    private readonly ILocalStorageService _localStorage;

    public SpotifyAuthenticationStateProvider(ILocalStorageService localStorage)
    {
        _localStorage = localStorage;
    }

    public async Task MarkUserAsAuthenticated(string accessToken)
    {
        var identity = new ClaimsIdentity(new[]
        {
            new Claim(ClaimTypes.Name, "Spotify User"),
            new Claim("access_token", accessToken)
        }, "Spotify");

        var user = new ClaimsPrincipal(identity);

        // Notify Blazor that the authentication state has changed
        NotifyAuthenticationStateChanged(Task.FromResult(new AuthenticationState(user)));
    }

    public override async Task<AuthenticationState> GetAuthenticationStateAsync()
    {
        var accessToken = await _localStorage.GetItemAsync<string>("spotify_access_token");

        if (string.IsNullOrEmpty(accessToken))
        {
            return new AuthenticationState(new ClaimsPrincipal(new ClaimsIdentity()));
        }

        var identity = new ClaimsIdentity(new[]
        {
            new Claim(ClaimTypes.Name, "Spotify User"),
            new Claim("access_token", accessToken)
        }, "Spotify");

        var user = new ClaimsPrincipal(identity);
        return new AuthenticationState(user);
    }
}

}

