@page "/spotify-callback"
@using FM.Application.Services
@using FM.Application.Services.AuthServices
@using Microsoft.JSInterop
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation
@inject AuthService AuthService
@inject TokenService TokenService
@inject SpotifyAuthenticationStateProvider AuthStateProvider

<div class="container mt-5">
    <div class="text-center">
        <h2>Processing Authentication...</h2>

        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert alert-danger">
                <p>@errorMessage</p>
                <button class="btn btn-primary mt-3" @onclick="ReturnHome">Return to Home</button>
            </div>
        }
        else
        {
            <LoadingScreen LoadingText="Loading your music..." />
        }
    </div>
</div>

@code {
    [Parameter]
    [SupplyParameterFromQuery]
    public string State { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public string Code { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public string Error { get; set; }

    private string errorMessage = "";

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Console.WriteLine("SpotifyCallback: OnInitializedAsync started");

            // Check for error parameter first
            if (!string.IsNullOrEmpty(Error))
            {
                errorMessage = $"Authentication error: {Error}";
                return;
            }

            if (string.IsNullOrEmpty(Code))
            {
                errorMessage = "Authorization code is missing. Please try logging in again.";
                return;
            }

            Console.WriteLine($"Callback received with code: {Code.Substring(0, Math.Min(10, Code.Length))}...");
            Console.WriteLine($"Callback received with state: {State}");


            var storedState = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "spotify_auth_state");

            if (!string.IsNullOrEmpty(State) && !string.IsNullOrEmpty(storedState) && State != storedState)
            {
                Console.WriteLine($"State mismatch - stored: {storedState} url: {State}");
            }

            try
            {
                await ProcessAuthCode(Code);
            }
            catch (Exception ex)
            {
                errorMessage = "Failed to process authentication. Please try again.";
                Console.Error.WriteLine($"Error processing auth code: {ex.Message}");
            }
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error in callback: {ex.Message}");
            errorMessage = "Authentication error occurred";
        }
    }

    private async Task ProcessAuthCode(string code)
    {
        TokenService.SetAccessToken("temporary_token", 3600);

        var authProvider = (SpotifyAuthenticationStateProvider)AuthStateProvider;
        await authProvider.MarkUserAsAuthenticated("temporary_token");

        Navigation.NavigateTo("/dashboard");
    }

    private void ReturnHome()
    {
        Navigation.NavigateTo("/");
    }
}
