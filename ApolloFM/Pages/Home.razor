@page "/"
@using Microsoft.AspNetCore.Components.Authorization
@using FM.Application.Services
@using Blazored.LocalStorage
@implements IDisposable
@inject AuthService AuthService
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthStateProvider
@inject ILocalStorageService LocalStorage
@inject IJSRuntime JSRuntime

<div class="homepage-container">
	<div class="header">
		<div class="logo">
			<img src="images/ApolloFM.png" alt="ApolloFM Logo" class="logo-image" />
		</div>
	</div>

	<div class="content-container">
		<h1 class="title">Welcome to ApolloFM</h1>
		<p class="intro-text">Connect your Spotify Account to get started.</p>

		@if (isLoading)
		{
			<div class="spinner-container">
				<div class="spinner-border text-light" role="status">
					<span class="visually-hidden">Loading...</span>
				</div>
			</div>
		}
		else if (!isLoggedIn)
		{
			<button class="btn-spotify" @onclick="Login">
				<i class="fab fa-spotify me-2"></i> Connect with Spotify
			</button>

			@if (authError)
			{
				<div class="error-message">
					@errorMessage
				</div>
			}
		}
		else
		{
			<p class="welcome-text">Welcome back, <strong class="user-name">@(string.IsNullOrEmpty(userName) ? "Spotify User" : userName)</strong>!</p>
			<button class="btn-primary dashboard-btn" @onclick="GoToDashboard">
				<i class="fas fa-chart-line me-1"></i> Go to Dashboard
			</button>
			<button class="logout-btn" @onclick="Logout">
				<i class="fas fa-sign-out-alt me-1"></i> Logout
			</button>
		}
	</div>
</div>

@code {

	private bool isLoggedIn = false;
	private string? userName;
	private bool isLoading = true;
	private bool authError = false;
	private string errorMessage = "There was a problem authenticating with Spotify. Please try again.";

	protected override async Task OnInitializedAsync()
	{
		try
		{
			Console.WriteLine("Home: OnInitializedAsync started");

			// First check if we have a token in localStorage
			string token = null;

			try
			{
				token = await LocalStorage.GetItemAsync<string>("spotify_access_token");
			}
			catch (Exception ex)
			{
				Console.WriteLine($"Error reading from localStorage: {ex.Message}");
			}

			if (!string.IsNullOrEmpty(token))
			{
				try
				{
					// Token exists, try to authenticate with it
					var authProvider = (SpotifyAuthenticationStateProvider)AuthStateProvider;
					await authProvider.MarkUserAsAuthenticated(token);
					Console.WriteLine("User authenticated with stored token");
				}
				catch (Exception ex)
				{
					Console.WriteLine($"Error authenticating with stored token: {ex.Message}");
				}
			}

			// Check if user is authenticated
			try
			{
				isLoggedIn = await AuthService.IsUserAuthenticated();
				Console.WriteLine($"User is authenticated: {isLoggedIn}");

				if (isLoggedIn)
				{
					try
					{
						var profile = await AuthService.GetUserProfile();
						userName = profile?.DisplayName ?? "Spotify User";
						Console.WriteLine($"Got user profile: {userName}");
					}
					catch (Exception ex)
					{
						Console.WriteLine($"Error getting profile: {ex.Message}");
						userName = "Spotify User";
					}
				}
			}
			catch (Exception ex)
			{
				Console.WriteLine($"Error checking authentication: {ex.Message}");
				isLoggedIn = false;
			}

			Console.WriteLine("Home: OnInitializedAsync completed");
		}
		catch (Exception ex)
		{
			Console.WriteLine($"Unhandled error in OnInitializedAsync: {ex.Message}\n{ex.StackTrace}");
			authError = true;
			errorMessage = "Error during initialization. Please refresh the page and try again.";
		}
		finally
		{
			isLoading = false;
		}

		// Subscribe to the AuthenticationStateChanged event
		try
		{
			AuthStateProvider.AuthenticationStateChanged += AuthenticationStateChangedHandler;
		}
		catch (Exception ex)
		{
			Console.WriteLine($"Error subscribing to auth state changes: {ex.Message}");
		}
	}

	private void Login()
	{
		try
		{
			var apiUrl = "https://localhost:7043";
			// Brug handle-state-error i stedet for normal login flow
			Navigation.NavigateTo($"{apiUrl}/api/auth/handle-state-error", forceLoad: true);
		}
		catch (Exception ex)
		{
			Console.WriteLine($"Error during login navigation: {ex.Message}");
			authError = true;
			errorMessage = "Error during login. Please try again.";
			StateHasChanged();
		}
	}


	private void GoToDashboard()
	{
		Navigation.NavigateTo("/dashboard");
	}

	private void Logout()
	{
		try
		{
			AuthService.Logout();
		}
		catch (Exception ex)
		{
			Console.WriteLine($"Error during logout: {ex.Message}");
			// Show error message or handle gracefully
		}
	}

	private async void AuthenticationStateChangedHandler(Task<AuthenticationState> task)
	{
		try
		{
			var authState = await task;
			isLoggedIn = authState.User.Identity?.IsAuthenticated ?? false;
			Console.WriteLine($"Auth state changed: isLoggedIn = {isLoggedIn}");

			if (isLoggedIn)
			{
				try
				{
					var profile = await AuthService.GetUserProfile();
					userName = profile?.DisplayName ?? "Spotify User";
				}
				catch (Exception ex)
				{
					Console.WriteLine($"Error getting profile after auth state change: {ex.Message}");
					userName = "Spotify User";
				}
			}
			else
			{
				userName = null;
			}

			await InvokeAsync(StateHasChanged);
		}
		catch (Exception ex)
		{
			Console.WriteLine($"Error in AuthenticationStateChangedHandler: {ex.Message}");
		}
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			try
			{
				// Check if AuthenticationService exists
				var authServiceExists = await JSRuntime.InvokeAsync<bool>("eval", "typeof AuthenticationService !== 'undefined'");

				if (authServiceExists)
				{
					await JSRuntime.InvokeVoidAsync("AuthenticationService.init");
					Console.WriteLine("AuthenticationService.init called successfully");
				}
			}
			catch (Exception ex)
			{
				Console.WriteLine($"JS Interop error: {ex.Message}");
				// Suppress the error and continue
			}
		}
	}

	public void Dispose()
	{
		try
		{
			// Clean up event handlers to prevent memory leaks
			AuthStateProvider.AuthenticationStateChanged -= AuthenticationStateChangedHandler;
		}
		catch (Exception ex)
		{
			Console.WriteLine($"Error during Dispose: {ex.Message}");
		}
	}
}

