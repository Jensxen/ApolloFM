@page "/forum"
@using FM.Application.Services.ForumServices
@using FM.Application.Services.ServiceDTO
@using FM.Application.Services.AuthServices
@inject IForumService ForumService
@inject AuthService AuthService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<div class="sidebar">
    <div class="sidebar-logo">
        <img src="images/ApolloFM.png" alt="ApolloFM Logo" />
    </div>

    <div class="sidebar-menu">
        <NavLink class="sidebar-item" href="dashboard">
            <i class="fas fa-home"></i>
            <span>Dashboard</span>
        </NavLink>

        <NavLink class="sidebar-item" href="forum" Match="NavLinkMatch.All">
            <i class="fas fa-comments"></i>
            <span>Forum</span>
        </NavLink>

        <NavLink class="sidebar-item" href="discover">
            <i class="fas fa-compass"></i>
            <span>Discover</span>
        </NavLink>

        <NavLink class="sidebar-item" href="playlists">
            <i class="fas fa-list"></i>
            <span>Playlists</span>
        </NavLink>

        <NavLink class="sidebar-item" href="profile">
            <i class="fas fa-user"></i>
            <span>Profile</span>
        </NavLink>
    </div>

    <div class="sidebar-footer">
        <button class="logout-btn" @onclick="GoToDashboard">
            <i class="fas fa-arrow-left"></i>
        </button>
    </div>
</div>

<div class="main-content">
    <div class="top-bar">
        <h1>Music Forum</h1>
    </div>

    <div class="content-area">
        @if (isLoading)
        {
            <div class="loading-spinner">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
        }
        else
        {
            <!-- Subforum filter -->
            <div class="content-card mb-4">
                <div class="card-header">
                    <div class="d-flex justify-content-between align-items-center">
                        <h3>Categories</h3>
                        <div>
                            <select class="form-select" @bind="selectedSubForumId">
                                <option value="0">All Categories</option>
                                @foreach (var subforum in subForums)
                                {
                                    <option value="@subforum.Id">@subforum.Name</option>
                                }
                            </select>
                        </div>
                    </div>
                </div>
            </div>

            <div class="content-card">
                <div class="card-header">
                    <div class="d-flex justify-content-between align-items-center">
                        <h3>Recent Discussions</h3>
                        <button class="btn btn-primary" @onclick="ShowCreateTopicModal">
                            <i class="fas fa-plus me-1"></i> New Topic
                        </button>
                    </div>
                </div>
                <div class="card-body">
                    @if (filteredTopics.Count == 0)
                    {
                        <div class="text-center p-4">
                            <p class="text-muted">No discussions found. Be the first to start a conversation!</p>
                        </div>
                    }
                    else
                    {
                        <div class="forum-list">
                            @foreach (var topic in filteredTopics)
                            {
                                <div class="forum-item" @onclick="() => NavigateToTopic(topic.Id)">
                                    <div class="forum-icon">
                                        <i class="@topic.Icon"></i>
                                    </div>
                                    <div class="forum-details">
                                        <h4>@topic.Title</h4>
                                        <p>@GetContentSummary(topic.Content)</p>
                                        <div class="forum-meta">
                                            <span><i class="fas fa-user me-1"></i> @topic.AuthorName</span>
                                            <span><i class="fas fa-clock me-1"></i> @FormatTimeAgo(topic.CreatedAt)</span>
                                            <span><i class="fas fa-comment me-1"></i> @topic.CommentCount</span>
                                            <span><i class="fas fa-folder me-1"></i> @topic.SubForumName</span>
                                        </div>
                                    </div>
                                    <div class="forum-activity">
                                        <div class="activity-indicator @(IsActiveDiscussion(topic) ? "active" : "")"></div>
                                    </div>
                                </div>
                            }
                        </div>
                    }
                </div>
            </div>
        }
    </div>
</div>

@if (showCreateTopicModal)
{
    <div class="modal-backdrop" @onclick="CloseCreateTopicModal"></div>
    <div class="modal show d-block" tabindex="-1">
        <div class="modal-dialog" @onclick:stopPropagation="true">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Create New Discussion</h5>
                    <button type="button" class="btn-close" @onclick="CloseCreateTopicModal"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label for="topicTitle" class="form-label">Title</label>
                        <input type="text" class="form-control" id="topicTitle" @bind="newTopic.Title"
                               placeholder="What do you want to discuss?" />
                        @if (!string.IsNullOrEmpty(titleError))
                        {
                            <div class="text-danger mt-1">@titleError</div>
                        }
                    </div>

                    <div class="mb-3">
                        <label for="topicContent" class="form-label">Content</label>
                        <textarea class="form-control" id="topicContent" @bind="newTopic.Content" rows="5"
                                  placeholder="Share your thoughts..."></textarea>
                        @if (!string.IsNullOrEmpty(contentError))
                        {
                            <div class="text-danger mt-1">@contentError</div>
                        }
                    </div>

                    <div class="mb-3">
                        <label for="topicSubforum" class="form-label">Category</label>
                        <select class="form-control" id="topicSubforum" @bind="newTopic.SubForumId">
                            @foreach (var subforum in subForums)
                            {
                                <option value="@subforum.Id">@subforum.Name</option>
                            }
                        </select>
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Icon</label>
                        <div class="d-flex flex-wrap icon-selector">
                            @foreach (var icon in availableIcons)
                            {
                                <div class="icon-option @(newTopic.Icon == icon ? "selected" : "")"
                                     @onclick="() => SelectIcon(icon)">
                                    <i class="@icon"></i>
                                </div>
                            }
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseCreateTopicModal">Cancel</button>
                    <button type="button" class="btn btn-primary" @onclick="CreateTopic" disabled="@isSubmitting">
                        @if (isSubmitting)
                        {
                            <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                            <span class="ms-1">Creating...</span>
                        }
                        else
                        {
                            <span>Create Topic</span>
                        }
                    </button>
                </div>
            </div>
        </div>
    </div>
}

<style>
    /* Include your existing styles */

    /* Additional styles for new features */
    .form-select, .form-control {
        background-color: #333;
        border: 1px solid #444;
        color: white;
    }

        .form-select:focus, .form-control:focus {
            background-color: #444;
            border-color: #1db954;
            color: white;
            box-shadow: 0 0 0 0.25rem rgba(29, 185, 84, 0.25);
        }

    /* Modal styles */
    .modal-backdrop {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
        z-index: 1000;
    }

    .modal {
        z-index: 1100;
    }

    .modal-content {
        background-color: #282828;
        color: white;
    }

    .modal-header, .modal-footer {
        border-color: #333;
    }

    .btn-close {
        filter: invert(1) grayscale(100%) brightness(200%);
    }

    /* Icon selector */
    .icon-selector {
        display: flex;
        flex-wrap: wrap;
        gap: 10px;
    }

    .icon-option {
        width: 40px;
        height: 40px;
        display: flex;
        align-items: center;
        justify-content: center;
        background-color: #333;
        border-radius: 4px;
        cursor: pointer;
        transition: all 0.2s;
    }

        .icon-option:hover {
            background-color: #444;
        }

        .icon-option.selected {
            background-color: #1db954;
        }

    /* Loading spinner */
    .loading-spinner {
        display: flex;
        justify-content: center;
        align-items: center;
        height: 200px;
    }
</style>

@code {
    // Data
    private List<ForumTopicDto> forumTopics = new List<ForumTopicDto>();
    private List<SubForumDto> subForums = new List<SubForumDto>();

    // UI state
    private bool isLoading = true;
    private bool showCreateTopicModal = false;
    private bool isSubmitting = false;
    private int selectedSubForumId = 0;
    private string currentUserId;
    private string userDisplayName;

    // Form state
    private CreateTopicDto newTopic = new CreateTopicDto();
    private string titleError;
    private string contentError;

    // Computed properties
    private List<ForumTopicDto> filteredTopics => selectedSubForumId == 0
        ? forumTopics
        : forumTopics.Where(t => t.SubForumId == selectedSubForumId).ToList();

    // Icon options
    private List<string> availableIcons = new List<string>
    {
        "fas fa-comments",
        "fas fa-record-vinyl",
        "fas fa-microphone",
        "fas fa-guitar",
        "fas fa-compact-disc",
        "fas fa-headphones",
        "fas fa-music",
        "fas fa-drum",
        "fas fa-star",
        "fas fa-sliders-h"
    };

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        try
        {
            isLoading = true;

            // Try to get user info
            var userProfile = await AuthService.GetUserProfile();
            if (userProfile != null)
            {
                currentUserId = userProfile.Id;
                userDisplayName = userProfile.DisplayName;
            }

            // Load subforums and topics
            subForums = await ForumService.GetSubForumsAsync();
            forumTopics = await ForumService.GetTopicsAsync();

            // Initialize new topic with default values
            if (subForums.Any() && newTopic.SubForumId == 0)
            {
                newTopic.SubForumId = subForums.First().Id;
            }
            newTopic.Icon = "fas fa-comments";
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", "Error loading forum data:", ex.Message);
        }
        finally
        {
            isLoading = false;
        }
    }

    private void NavigateToTopic(int topicId)
    {
        NavigationManager.NavigateTo($"/forum/topic/{topicId}");
    }

    private void ShowCreateTopicModal()
    {
        // Reset form
        newTopic = new CreateTopicDto
            {
                SubForumId = subForums.Any() ? subForums.First().Id : 0,
                Icon = "fas fa-comments"
            };
        titleError = null;
        contentError = null;
        showCreateTopicModal = true;
    }

    private void CloseCreateTopicModal()
    {
        showCreateTopicModal = false;
    }

    private void SelectIcon(string icon)
    {
        newTopic.Icon = icon;
    }

    private async Task CreateTopic()
    {
        // Validate form
        bool isValid = true;

        if (string.IsNullOrWhiteSpace(newTopic.Title))
        {
            titleError = "Title is required";
            isValid = false;
        }
        else if (newTopic.Title.Length < 3)
        {
            titleError = "Title must be at least 3 characters";
            isValid = false;
        }
        else
        {
            titleError = null;
        }

        if (string.IsNullOrWhiteSpace(newTopic.Content))
        {
            contentError = "Content is required";
            isValid = false;
        }
        else if (newTopic.Content.Length < 10)
        {
            contentError = "Content must be at least 10 characters";
            isValid = false;
        }
        else
        {
            contentError = null;
        }

        if (!isValid) return;

        // Submit form
        isSubmitting = true;

        try
        {
            var createdTopic = await ForumService.CreateTopicAsync(newTopic, currentUserId ?? "anonymous");

            if (createdTopic != null)
            {
                // Add to the list and close modal
                forumTopics.Insert(0, createdTopic);
                CloseCreateTopicModal();

                // Show success message
                await JSRuntime.InvokeVoidAsync("alert", "Topic created successfully!");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", "Error creating topic:", ex.Message);
            await JSRuntime.InvokeVoidAsync("alert", "Failed to create topic: " + ex.Message);
        }
        finally
        {
            isSubmitting = false;
        }
    }

    private string GetContentSummary(string content)
    {
        if (string.IsNullOrEmpty(content)) return string.Empty;

        // Create a summary (first 150 chars)
        return content.Length > 150
            ? content.Substring(0, 147) + "..."
            : content;
    }

    private string FormatTimeAgo(DateTime date)
    {
        var timeSpan = DateTime.Now - date;

        if (timeSpan.TotalMinutes < 1)
            return "just now";
        if (timeSpan.TotalMinutes < 60)
            return $"{(int)timeSpan.TotalMinutes} minutes ago";
        if (timeSpan.TotalHours < 24)
            return $"{(int)timeSpan.TotalHours} hours ago";
        if (timeSpan.TotalDays < 7)
            return $"{(int)timeSpan.TotalDays} days ago";
        if (timeSpan.TotalDays < 30)
            return $"{(int)(timeSpan.TotalDays / 7)} weeks ago";
        if (timeSpan.TotalDays < 365)
            return $"{(int)(timeSpan.TotalDays / 30)} months ago";

        return $"{(int)(timeSpan.TotalDays / 365)} years ago";
    }

    private bool IsActiveDiscussion(ForumTopicDto topic)
    {
        // Topic is considered active if it's less than 3 days old or has recent comments
        return (DateTime.Now - topic.CreatedAt).TotalDays < 3 || topic.CommentCount > 0;
    }

    private void GoToDashboard()
    {
        NavigationManager.NavigateTo("/dashboard");
    }
}
